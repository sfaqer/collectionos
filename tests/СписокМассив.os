#Использовать asserts

#Использовать ".."
#Использовать "./ТестМодуль"

Перем Рефлектор;                // Рефлектор
Перем ДляКаждогоВыполнилсяРаз;  // Количество раз которое выполнился метод ДляКаждого
Перем СписокФикстура;           // Кеш списка фикстуры

&Тест
Процедура СписокМассивСоздается() Экспорт
	
	// Дано

	// Когда

	Результат = Новый СписокМассив;

	// Тогда

	Ожидаем.Что(Результат).ИмеетТип("СписокМассив");

КонецПроцедуры

&Тест
Процедура Итератор() Экспорт

	// Дано
	
	СписокМассив = Новый СписокМассив;

	// Когда

	Результат = СписокМассив.Итератор();

	// Тогда
	
	Ожидаем.Что(Результат).ИмеетТип("СписокИтераторМассив");

КонецПроцедуры

&Тест
Процедура ДляКаждого() Экспорт

	// Дано

	ДляКаждогоВыполнилсяРаз = 0;

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.ДляКаждого(Новый Действие(ЭтотОбъект, "ДействиеДляКаждого"));

	// Тогда
	
	Ожидаем.Что(ДляКаждогоВыполнилсяРаз).Равно(3);

КонецПроцедуры

&Тест
Процедура ДляКаждогоЛямбда() Экспорт

	// Дано

	ТестМодуль.ДляКаждогоВыполнилсяРаз = 0;
	ТестМодуль.СуммаЭлементов          = 0;

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.ДляКаждого(
		"Элемент -> ТестМодуль.ДляКаждогоВыполнилсяРаз = ТестМодуль.ДляКаждогоВыполнилсяРаз + 1;
		|	ТестМодуль.СуммаЭлементов = ТестМодуль.СуммаЭлементов + Элемент;"
	);

	// Тогда
	
	Ожидаем.Что(ТестМодуль.ДляКаждогоВыполнилсяРаз).Равно(3);
	Ожидаем.Что(ТестМодуль.СуммаЭлементов).Равно(6);

КонецПроцедуры

&Тест
Процедура ДляКаждогоЛямбдаКонтекстСтруктура() Экспорт

	// Дано

	Контекст = Новый Структура("ДляКаждогоВыполнилсяРаз, СуммаЭлементов", 0, 0);

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.ДляКаждого(
		"Элемент -> Контекст.ДляКаждогоВыполнилсяРаз = Контекст.ДляКаждогоВыполнилсяРаз + 1;
		|	Контекст.СуммаЭлементов = Контекст.СуммаЭлементов + Элемент;",
		Новый Структура("Контекст", Контекст)
	);

	// Тогда

	Ожидаем.Что(Контекст.ДляКаждогоВыполнилсяРаз).Равно(3);
	Ожидаем.Что(Контекст.СуммаЭлементов).Равно(6);

КонецПроцедуры

&Тест
Процедура ДляКаждогоЛямбдаКонтекстОбъект() Экспорт

	// Дано

	ТестМодуль.ДляКаждогоВыполнилсяРаз = 0;
	ТестМодуль.СуммаЭлементов          = 0;

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.ДляКаждого(
		"Элемент -> ДляКаждогоВыполнилсяРаз = ДляКаждогоВыполнилсяРаз + 1;
		|	СуммаЭлементов = СуммаЭлементов + Элемент;",
		ТестМодуль
	);

	// Тогда

	Ожидаем.Что(ТестМодуль.ДляКаждогоВыполнилсяРаз).Равно(3);
	Ожидаем.Что(ТестМодуль.СуммаЭлементов).Равно(6);

КонецПроцедуры

&Тест
Процедура Содержит() Экспорт

	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Содержит(2);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоИстина();

КонецПроцедуры

&Тест
Процедура НеСодержит() Экспорт

	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Содержит(4);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоЛожь();

КонецПроцедуры

&Тест
Процедура СодержитВсе() Экспорт

	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.СодержитВсе(
		СписокФикстура()
	);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоИстина();

КонецПроцедуры

&Тест
Процедура СодержитНеВсе() Экспорт

	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.СодержитВсе(
		СписокФикстура()
	);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоЛожь();

КонецПроцедуры

&Тест
Процедура Пусто() Экспорт

	// Дано

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Новый Массив
	);

	// Когда

	Результат = СписокМассив.Пусто();

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоИстина();

КонецПроцедуры

&Тест
Процедура НеПусто() Экспорт

	// Дано

	Массив = Новый Массив;
	Массив.Добавить(1);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Пусто();

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоЛожь();

КонецПроцедуры

&Тест
Процедура ПроцессорКоллекции() Экспорт
	
	// Дано

	СписокМассив = Новый СписокМассив;

	// Когда

	Результат = СписокМассив.ПроцессорКоллекции();

	// Тогда

	Ожидаем.Что(Результат).ИмеетТип("ПроцессорКоллекций");

КонецПроцедуры

&Тест
Процедура Количество() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Количество();

	// Тогда
	
	Ожидаем.Что(Результат).Равно(3);

КонецПроцедуры

&Тест
Процедура Добавить() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Добавить(4);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоИстина();

	Ожидаем.Что(Массив)
		.ИмеетДлину(4)
		.Содержит(1)
		.Содержит(2)
		.Содержит(3)
		.Содержит(4);

КонецПроцедуры

&Тест
Процедура ДобавитьВсе() Экспорт
	
	// Дано
	
	СписокМассив = Новый СписокМассив;

	// Когда

	Результат = СписокМассив.ДобавитьВсе(
		СписокФикстура()
	);

	// Тогда

	Ожидаем.Что(Результат).ЭтоИстина();

	Массив = Рефлектор.ПолучитьСвойство(СписокМассив, "Массив");

	Ожидаем.Что(Массив)
		.ИмеетДлину(3)
		.Содержит(1)
		.Содержит(2)
		.Содержит(3);

КонецПроцедуры

&Тест
Процедура НеДобавитьВсе() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.ДобавитьВсе(
		ПустойСписокФикстура()
	);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоЛожь();
	
	Ожидаем.Что(Массив)
		.ИмеетДлину(3)
		.Содержит(1)
		.Содержит(2)
		.Содержит(3);

КонецПроцедуры

&Тест
Процедура Очистить() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.Очистить();

	// Тогда
	
	Ожидаем.Что(Массив).ИмеетДлину(0);

КонецПроцедуры

&Тест
Процедура Удалить() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Удалить(2);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоИстина();

	Ожидаем.Что(Массив)
		.ИмеетДлину(2)
		.Содержит(1)
		.Содержит(3)
		.Не_().Содержит(2);

КонецПроцедуры

&Тест
Процедура НеУдалить() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Удалить(4);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоЛожь();

	Ожидаем.Что(Массив)
		.ИмеетДлину(3)
		.Содержит(1)
		.Содержит(2)
		.Содержит(3);

КонецПроцедуры

&Тест
Процедура УдалитьВсе() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(4);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.УдалитьВсе(СписокФикстура());

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоИстина();
	
	Ожидаем.Что(Массив)
		.ИмеетДлину(1)
		.Содержит(4);

КонецПроцедуры

&Тест
Процедура НеУдалитьВсе() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(4);
	Массив.Добавить(5);
	Массив.Добавить(6);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.УдалитьВсе(СписокФикстура());

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоЛожь();

	Ожидаем.Что(Массив)
		.ИмеетДлину(3)
		.Содержит(4)
		.Содержит(5)
		.Содержит(6);

КонецПроцедуры

&Тест
Процедура УдалитьЕсли() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.УдалитьЕсли(
		Новый Действие(ЭтотОбъект, "БольшеИлиРавноДвум")
	);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоИстина();

	Ожидаем.Что(Массив)
		.ИмеетДлину(1)
		.Содержит(1);

КонецПроцедуры

&Тест
Процедура НеУдалитьЕсли() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(0);
	Массив.Добавить(1);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.УдалитьЕсли(
		Новый Действие(ЭтотОбъект, "БольшеИлиРавноДвум")
	);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоЛожь();

	Ожидаем.Что(Массив)
		.ИмеетДлину(2)
		.Содержит(0)
		.Содержит(1);

КонецПроцедуры

&Тест
Процедура УдалитьЕслиЛямбда() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.УдалитьЕсли(
		"Элемент -> Элемент >= 2"
	);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоИстина();

	Ожидаем.Что(Массив)
		.ИмеетДлину(1)
		.Содержит(1);

КонецПроцедуры

&Тест
Процедура УдалитьЕслиЛямбдаКонтекстСтруктура() Экспорт

	// Дано

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.УдалитьЕсли(
		"Элемент -> Элемент >= Порог",
		Новый Структура("Порог", 2)
	);

	// Тогда

	Ожидаем.Что(Результат).ЭтоИстина();

	Ожидаем.Что(Массив)
		.ИмеетДлину(1)
		.Содержит(1);

КонецПроцедуры

&Тест
Процедура УдалитьЕслиЛямбдаКонтекстОбъект() Экспорт

	// Дано

	ТестМодуль.СуммаЭлементов = 2;

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.УдалитьЕсли(
		"Элемент -> Элемент >= СуммаЭлементов",
		ТестМодуль
	);

	// Тогда

	Ожидаем.Что(Результат).ЭтоИстина();

	Ожидаем.Что(Массив)
		.ИмеетДлину(1)
		.Содержит(1);

КонецПроцедуры

&Тест
Процедура СохранитьВсе() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(0);
	Массив.Добавить(1);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.СохранитьВсе(
		СписокФикстура()
	);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоИстина();

	Ожидаем.Что(Массив)
		.ИмеетДлину(1)
		.Содержит(1);

КонецПроцедуры

&Тест
Процедура НеСохранитьВсе() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.СохранитьВсе(
		СписокФикстура()
	);

	// Тогда
	
	Ожидаем.Что(Результат).ЭтоЛожь();

	Ожидаем.Что(Массив)
		.ИмеетДлину(2)
		.Содержит(1)
		.Содержит(2);

КонецПроцедуры

&Тест
Процедура ПолучитьСуществует() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Получить(1);

	// Тогда

	Ожидаем.Что(Результат).Равно(2);

КонецПроцедуры

&Тест
Процедура ПолучитьНеСуществует() Экспорт
	
	// Дано

	СписокМассив = Новый СписокМассив;

	Параметры = Новый Массив;
	Параметры.Добавить(1);

	// Когда

	// Тогда

	Ожидаем.Что(СписокМассив)
		.Метод("Получить", Параметры)
		.ВыбрасываетИсключение("Значение индекса выходит за пределы диапазона");

КонецПроцедуры

&Тест
Процедура ИндексСуществует() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Индекс(2);

	// Тогда

	Ожидаем.Что(Результат).Равно(1);

КонецПроцедуры

&Тест
Процедура ИндексНеСуществует() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Индекс(3);

	// Тогда

	Ожидаем.Что(Результат).Равно(-1);

КонецПроцедуры

&Тест
Процедура ПоследнийИндексСуществует() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(2); // BSLLS:DuplicatedInsertionIntoCollection-off

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.ПоследнийИндекс(2);

	// Тогда

	Ожидаем.Что(Результат).Равно(2);

КонецПроцедуры

&Тест
Процедура ПоследнийИндексНеСуществует() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.ПоследнийИндекс(3);

	// Тогда

	Ожидаем.Что(Результат).Равно(-1);

КонецПроцедуры

&Тест
Процедура ВГраница() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.ВГраница();

	// Тогда

	Ожидаем.Что(Результат).Равно(1);

КонецПроцедуры

&Тест
Процедура Вставить() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Вставить(1, 3);

	// Тогда

	Ожидаем.Что(Результат).ЭтоИстина();
	Ожидаем.Что(Массив)
		.ИмеетДлину(3);

	Ожидаем.Что(Массив[0]).Равно(1);
	Ожидаем.Что(Массив[1]).Равно(3);
	Ожидаем.Что(Массив[2]).Равно(2);

КонецПроцедуры

&Тест
Процедура ВставитьВсе() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(4);
	Массив.Добавить(5);
	Массив.Добавить(6);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.ВставитьВсе(0, СписокФикстура());

	// Тогда

	Ожидаем.Что(Результат).ЭтоИстина();
	Ожидаем.Что(Массив)
		.ИмеетДлину(6);

	Ожидаем.Что(Массив[0]).Равно(1);
	Ожидаем.Что(Массив[1]).Равно(2);
	Ожидаем.Что(Массив[2]).Равно(3);
	Ожидаем.Что(Массив[3]).Равно(4);
	Ожидаем.Что(Массив[4]).Равно(5);
	Ожидаем.Что(Массив[5]).Равно(6);

КонецПроцедуры

&Тест
Процедура НеВставитьВсе() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(4);
	Массив.Добавить(5);
	Массив.Добавить(6);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.ВставитьВсе(0, ПустойСписокФикстура());

	// Тогда

	Ожидаем.Что(Результат).ЭтоЛожь();
	Ожидаем.Что(Массив)
		.ИмеетДлину(3);

	Ожидаем.Что(Массив[0]).Равно(4);
	Ожидаем.Что(Массив[1]).Равно(5);
	Ожидаем.Что(Массив[2]).Равно(6);

КонецПроцедуры

&Тест
Процедура ЗаменитьВсе() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.ЗаменитьВсе(
		Новый Действие(ЭтотОбъект, "Инкремент")
	);

	// Тогда

	Ожидаем.Что(Массив).ИмеетДлину(3);

	Ожидаем.Что(Массив[0]).Равно(2);
	Ожидаем.Что(Массив[1]).Равно(3);
	Ожидаем.Что(Массив[2]).Равно(4);

КонецПроцедуры

&Тест
Процедура НеЗаменитьВсе() Экспорт
	
	// Дано

	СписокМассив = Новый СписокМассив;

	// Когда

	СписокМассив.ЗаменитьВсе(
		Новый Действие(ЭтотОбъект, "Инкремент")
	);

	// Тогда

	Ожидаем.Что(СписокМассив).ИмеетДлину(0);

КонецПроцедуры

&Тест
Процедура ЗаменитьВсеЛямбда() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.ЗаменитьВсе(
		"Элемент -> Элемент + 1"
	);

	// Тогда

	Ожидаем.Что(Массив).ИмеетДлину(3);

	Ожидаем.Что(Массив[0]).Равно(2);
	Ожидаем.Что(Массив[1]).Равно(3);
	Ожидаем.Что(Массив[2]).Равно(4);

КонецПроцедуры

&Тест
Процедура ЗаменитьВсеЛямбдаКонтекстСтруктура() Экспорт

	// Дано

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.ЗаменитьВсе(
		"Элемент -> Элемент + Соль",
		Новый Структура("Соль", 1)
	);

	// Тогда

	Ожидаем.Что(Массив).ИмеетДлину(3);

	Ожидаем.Что(Массив[0]).Равно(2);
	Ожидаем.Что(Массив[1]).Равно(3);
	Ожидаем.Что(Массив[2]).Равно(4);

КонецПроцедуры

&Тест
Процедура ЗаменитьВсеЛямбдаКонтекстОбъект() Экспорт

	// Дано

	ТестМодуль.СуммаЭлементов = 1;

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.ЗаменитьВсе(
		"Элемент -> Элемент + СуммаЭлементов",
		ТестМодуль
	);

	// Тогда

	Ожидаем.Что(Массив).ИмеетДлину(3);

	Ожидаем.Что(Массив[0]).Равно(2);
	Ожидаем.Что(Массив[1]).Равно(3);
	Ожидаем.Что(Массив[2]).Равно(4);

КонецПроцедуры

&Тест
Процедура СортироватьПрямойПорядок() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(2);
	Массив.Добавить(3);
	Массив.Добавить(1);
	Массив.Добавить(2); // BSLLS:DuplicatedInsertionIntoCollection-off

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.Сортировать(
		СравнениеЗначений.ПрямойПорядок()
	);

	// Тогда

	Ожидаем.Что(Массив).ИмеетДлину(4);

	Ожидаем.Что(Массив[0]).Равно(1);
	Ожидаем.Что(Массив[1]).Равно(2);
	Ожидаем.Что(Массив[2]).Равно(2);
	Ожидаем.Что(Массив[3]).Равно(3);

КонецПроцедуры

&Тест
Процедура СортироватьОбратныйПорядок() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(2);
	Массив.Добавить(3);
	Массив.Добавить(1);
	Массив.Добавить(2); // BSLLS:DuplicatedInsertionIntoCollection-off

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.Сортировать(
		СравнениеЗначений.ОбратныйПорядок()
	);

	// Тогда

	Ожидаем.Что(Массив).ИмеетДлину(4);

	Ожидаем.Что(Массив[0]).Равно(3);
	Ожидаем.Что(Массив[1]).Равно(2);
	Ожидаем.Что(Массив[2]).Равно(2);
	Ожидаем.Что(Массив[3]).Равно(1);

КонецПроцедуры

&Тест
Процедура СортироватьЛямбда() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(2);
	Массив.Добавить(3);
	Массив.Добавить(1);
	Массив.Добавить(2); // BSLLS:DuplicatedInsertionIntoCollection-off

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.Сортировать(
		"Первый, Второй -> 
		| Если Первый > Второй Тогда
		|	Возврат 1;
		| ИначеЕсли Второй > Первый Тогда
		|	Возврат -1;
		| Иначе
		|	Возврат 0;
		| КонецЕсли;"
	);

	// Тогда

	Ожидаем.Что(Массив).ИмеетДлину(4);

	Ожидаем.Что(Массив[0]).Равно(1);
	Ожидаем.Что(Массив[1]).Равно(2);
	Ожидаем.Что(Массив[2]).Равно(2);
	Ожидаем.Что(Массив[3]).Равно(3);

КонецПроцедуры

&Тест
Процедура СортироватьЛямбдаКонтекстСтруктура() Экспорт

	// Дано

	Массив = Новый Массив;
	Массив.Добавить(2);
	Массив.Добавить(3);
	Массив.Добавить(1);
	Массив.Добавить(2); // BSLLS:DuplicatedInsertionIntoCollection-off

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.Сортировать(
		"Первый, Второй ->
		| Если Первый % Делитель > Второй % Делитель Тогда
		|	Возврат 1;
		| ИначеЕсли Второй % Делитель > Первый % Делитель Тогда
		|	Возврат -1;
		| Иначе
		|	Возврат 0;
		| КонецЕсли;",
		Новый Структура("Делитель", 2)
	);

	// Тогда

	Ожидаем.Что(Массив).ИмеетДлину(4);

	Ожидаем.Что(Массив[0]).Равно(2);
	Ожидаем.Что(Массив[1]).Равно(2);
	Ожидаем.Что(Массив[2]).Равно(3);
	Ожидаем.Что(Массив[3]).Равно(1);

КонецПроцедуры

&Тест
Процедура СортироватьЛямбдаКонтекстОбъект() Экспорт

	// Дано

	ТестМодуль.СуммаЭлементов = 2;

	Массив = Новый Массив;
	Массив.Добавить(2);
	Массив.Добавить(3);
	Массив.Добавить(1);
	Массив.Добавить(2); // BSLLS:DuplicatedInsertionIntoCollection-off

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	СписокМассив.Сортировать(
		"Первый, Второй ->
		| Если Первый % СуммаЭлементов > Второй % СуммаЭлементов Тогда
		|	Возврат 1;
		| ИначеЕсли Второй % СуммаЭлементов > Первый % СуммаЭлементов Тогда
		|	Возврат -1;
		| Иначе
		|	Возврат 0;
		| КонецЕсли;",
		ТестМодуль
	);

	// Тогда

	Ожидаем.Что(Массив).ИмеетДлину(4);

	Ожидаем.Что(Массив[0]).Равно(2);
	Ожидаем.Что(Массив[1]).Равно(2);
	Ожидаем.Что(Массив[2]).Равно(3);
	Ожидаем.Что(Массив[3]).Равно(1);

КонецПроцедуры

&Тест
Процедура УдалитьПоИндексуСуществует() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.УдалитьПоИндексу(1);

	// Тогда

	Ожидаем.Что(Результат).Равно(2);

	Ожидаем.Что(Массив)
		.ИмеетДлину(1)
		.Содержит(1);

КонецПроцедуры

&Тест
Процедура УдалитьПоИндексуНеСуществует() Экспорт
	
	// Дано

	СписокМассив = Новый СписокМассив;

	Параметры = Новый Массив;
	Параметры.Добавить(0);

	// Когда

	// Тогда

	Ожидаем.Что(СписокМассив)
		.Метод("УдалитьПоИндексу", Параметры)
		.ВыбрасываетИсключение("Значение индекса выходит за пределы диапазона");

КонецПроцедуры

&Тест
Процедура УстановитьСуществует() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.Установить(1, 3);

	// Тогда

	Ожидаем.Что(Результат).Равно(2);

	Ожидаем.Что(Массив).ИмеетДлину(2);

	Ожидаем.Что(Массив[0], 1);
	Ожидаем.Что(Массив[1], 3);

КонецПроцедуры

&Тест
Процедура УстановитьНеСуществует() Экспорт
	
	// Дано

	СписокМассив = Новый СписокМассив;

	Параметры = Новый Массив;
	Параметры.Добавить(0);
	Параметры.Добавить(3);

	// Когда

	// Тогда

	Ожидаем.Что(СписокМассив)
		.Метод("Установить", Параметры)
		.ВыбрасываетИсключение("Значение индекса выходит за пределы диапазона");

КонецПроцедуры

&Тест
Процедура ВМассив() Экспорт
	
	// Дано
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	Результат = СписокМассив.ВМассив();

	// Тогда

	Ожидаем.Что(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(2)
		.Содержит(1)
		.Содержит(2);
	
КонецПроцедуры

&Тест
Процедура МутацияИнвалидируетИтераторы() Экспорт
	
	// Дано

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	СписокМассив = Новый СписокМассив;

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	
	Итератор = СписокМассив.Итератор();

	// Когда

	СписокМассив.Добавить(4);

	// Тогда

	Ожидаем.Что(Итератор)
		.Метод("Следующий")
		.ВыбрасываетИсключение("Коллекция была изменена в процессе обхода");

КонецПроцедуры

&Тест
Процедура ПреставлениеПереопределяется() Экспорт
	
	// Дано

	СписокМассив = Новый СписокМассив;

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(СписокМассив);
	Массив.Добавить(ТестМодуль.ОбъектЗаглушка());

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);
	
	// Когда

	Результат = Строка(СписокМассив);

	// Тогда

	Ожидаем.Что(Результат)
		.Равно("[1, 2, (Эта коллекция), Заглушка]");

КонецПроцедуры

&Тест
Процедура ОбходитсяЦикломДляКаждого() Экспорт

	Если Не ТестМодуль.ЭтоДвижокВерсии2() Тогда
		Возврат;
	КонецЕсли;

	// Дано

	СписокМассив = Новый СписокМассив;

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);

	Рефлектор.УстановитьСвойство(
		СписокМассив,
		"Массив",
		Массив
	);

	// Когда

	// Тогда

	Для каждого Элемент Из СписокМассив Цикл

		Ожидаем.Что(Элемент)
			.БольшеИлиРавно(1)
			.МеньшеИлиРавно(2);

	КонецЦикла;

КонецПроцедуры

Функция Инкремент(Элемент) Экспорт
	Возврат Элемент + 1;
КонецФункции

Функция БольшеИлиРавноДвум(Элемент) Экспорт
	Два = 2;
	Возврат Элемент >= Два;
КонецФункции

Процедура ДействиеДляКаждого(Элемент) Экспорт

	ДляКаждогоВыполнилсяРаз = ДляКаждогоВыполнилсяРаз + 1;

	Ожидаем.Что(Элемент).Равно(ДляКаждогоВыполнилсяРаз);

КонецПроцедуры

Функция СписокФикстура()
	
	Если СписокФикстура <> Неопределено Тогда
		Возврат СписокФикстура;
	КонецЕсли;

	Коллекция = Новый Массив;
	Коллекция.Добавить(1);
	Коллекция.Добавить(2);
	Коллекция.Добавить(3);

	ПолеМассив = Новый Поле("Массив")
		.Публичное()
		.ЗначениеПоУмолчанию(Коллекция);

	МетодИтератор = Новый Метод("Итератор")
		.Публичный()
		.ТелоМетода("Возврат Новый СписокИтераторМассив(Массив, ЭтотОбъект);");

	МетодСодержит = Новый Метод("Содержит")
		.Публичный()
		.Параметр(Новый ПараметрМетода("Элемент"))
		.ТелоМетода("Возврат Массив.Найти(Элемент) <> Неопределено;");

	СписокФикстура = Новый ПостроительДекоратора()
		.Поле(ПолеМассив)
		.Метод(МетодИтератор)
		.Метод(МетодСодержит)
		.Построить();

	Возврат СписокФикстура;

КонецФункции

Функция ПустойСписокФикстура()
	
	МетодИтератор = Новый Метод("Итератор")
		.Публичный()
		.ТелоМетода("Возврат Новый СписокИтераторМассив(Новый Массив, ЭтотОбъект);");

	Возврат Новый ПостроительДекоратора()
		.Метод(МетодИтератор)
		.Построить();

КонецФункции

Рефлектор = Новый Рефлектор;
