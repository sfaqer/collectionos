#Использовать asserts

#Использовать ".."
#Использовать "./ТестМодуль"

Перем Рефлектор; // Рефлектор

&Тест
Процедура ОчередьОтложенныхСоздается() Экспорт
	
	// Дано

	// Когда

	Результат = Новый ОчередьОтложенных;

	// Тогда

	Ожидаем.Что(Результат).ИмеетТип("ОчередьОтложенных");

КонецПроцедуры

&Тест
Процедура Итератор() Экспорт

	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.Итератор();

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодИтератор, "Ожидали что будет вызван метод Итератор на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура ДляКаждого() Экспорт

	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.ДляКаждого(0);

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодДляКаждого, "Ожидали что будет вызван метод ДляКаждого на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура Содержит() Экспорт

	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.Содержит(0);

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодСодержит, "Ожидали что будет вызван метод Содержит на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура СодержитВсе() Экспорт

	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.СодержитВсе(0);

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодСодержитВсе, "Ожидали что будет вызван метод СодержитВсе на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура Пусто() Экспорт

	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.Пусто();

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодПусто, "Ожидали что будет вызван метод Пусто на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура ПроцессорКоллекции() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.ПроцессорКоллекции();

	// Тогда
	
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодПроцессорКоллекции,
		"Ожидали что будет вызван метод ПроцессорКоллекции на вложенной очереди"
	).Равно(Истина);

КонецПроцедуры

&Тест
Процедура Количество() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.Количество();

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодКоличество, "Ожидали что будет вызван метод Количество на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура Добавить() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.Добавить(Новый Отложенный(ТекущаяУниверсальнаяДатаВМиллисекундах(), 0));

	// Тогда
	
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодПоложитьРаз,
		"Ожидали что будет вызван метод Положить на вложенной очереди"
	).Равно(1);

КонецПроцедуры

&Тест
Процедура ДобавитьНеопределено() Экспорт

	// Дано

	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	Параметры = Новый Массив;
	Параметры.Добавить(Неопределено);

	// Когда

	// Тогда

	Ожидаем.Что(ОчередьОтложенных).Метод("Добавить", Параметры)
		.ВыбрасываетИсключение("Очередь не может содержать Неопределено");

	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодПоложитьРаз,
		"Ожидали что не будет вызван метод Положить на вложенной очереди"
	).Равно(0);

КонецПроцедуры

&Тест
Процедура ДобавитьНеотложенный() Экспорт

	// Дано

	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	Параметры = Новый Массив;
	Параметры.Добавить(Новый Массив);

	// Когда

	// Тогда

	Ожидаем.Что(ОчередьОтложенных).Метод("Добавить", Параметры)
		.ВыбрасываетИсключение("Не реализован требуемый интерфейс");

	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодПоложитьРаз,
		"Ожидали что не будет вызван метод Положить на вложенной очереди"
	).Равно(0);

КонецПроцедуры

&Тест
Процедура ДобавитьВсе() Экспорт
	
	// Дано
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	Результат = ОчередьОтложенных.ДобавитьВсе(
		ОчередьФикстура()
	);

	// Тогда

	Ожидаем.Что(Результат).ЭтоИстина();
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодПоложитьРаз,
		"Ожидали что будет вызван метод Положить на вложенной очереди 3 раза"
	).Равно(5);

КонецПроцедуры

&Тест
Процедура Очистить() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.Очистить();

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодОчистить, "Ожидали что будет вызван метод Очистить на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура Удалить() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.Удалить(0);

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодУдалить, "Ожидали что будет вызван метод Удалить на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура УдалитьВсе() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.УдалитьВсе(0);

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодУдалитьВсе, "Ожидали что будет вызван метод УдалитьВсе на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура УдалитьЕсли() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.УдалитьЕсли(0);

	// Тогда
	
	Ожидаем.Что(ОчередьФикстура.ВызванМетодУдалитьЕсли, "Ожидали что будет вызван метод УдалитьЕсли на вложенной очереди")
		.Равно(Истина);

КонецПроцедуры

&Тест
Процедура СохранитьВсе() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.СохранитьВсе(0);

	// Тогда
	
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодСохранитьВсе,
		"Ожидали что будет вызван метод СохранитьВсе на вложенной очереди"
	).Равно(Истина);

КонецПроцедуры

&Тест
Процедура ВМассив() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.ВМассив();

	// Тогда
	
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодВМассив,
		"Ожидали что будет вызван метод ВМассив на вложенной очереди"
	).Равно(Истина);

КонецПроцедуры

&Тест
Процедура ПреставлениеПереопределяется() Экспорт
	
	// Дано

	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура(, Ложь)
	);

	// Когда

	Результат = Строка(ОчередьОтложенных);

	// Тогда
	
	Ожидаем.Что(Результат)
		.Равно("[Отложенный{Значение=1}, Отложенный{Значение=2}, Отложенный{Значение=3}, Отложенный{Значение=4}, Отложенный{Значение=5}]"); // BSLLS:LineLength-off

КонецПроцедуры

&Тест
Процедура ОбходитсяЦикломДляКаждого() Экспорт

	Если Не ТестМодуль.ЭтоДвижокВерсии2() Тогда
		Возврат;
	КонецЕсли;

	// Дано

	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура()
	);

	// Когда

	// Тогда

	Для каждого Элемент Из ОчередьОтложенных Цикл

		Ожидаем.Что(Элемент.Значение())
			.БольшеИлиРавно(1)
			.МеньшеИлиРавно(5);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ПодсмотретьНеПора() Экспорт

	// Дано

	ОчередьФикстура   = ОчередьФикстура(5000);
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	Результат = ОчередьОтложенных.Подсмотреть();

	// Тогда

	Ожидаем.Что(Результат).Равно(Опциональные.Пустой());
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодПодсмотреть,
		"Ожидали что будет вызван метод Подсмотреть на вложенной очереди"
	).Равно(Истина);

КонецПроцедуры

&Тест
Процедура ПодсмотретьПора() Экспорт

	// Дано

	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	Результат = ОчередьОтложенных.Подсмотреть();

	// Тогда

	Ожидаем.Что(Результат.СодержитЗначение()).Равно(Истина);
	Ожидаем.Что(Результат.Получить().Значение()).Равно(1);
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодПодсмотреть,
		"Ожидали что будет вызван метод Подсмотреть на вложенной очереди"
	).Равно(Истина);

КонецПроцедуры

&Тест
Процедура Положить() Экспорт
	
	// Дано
	
	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	ОчередьОтложенных.Положить(Новый Отложенный(ТекущаяУниверсальнаяДатаВМиллисекундах(), 0));

	// Тогда
	
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодПоложитьРаз,
		"Ожидали что будет вызван метод Положить на вложенной очереди"
	).Равно(1);

КонецПроцедуры

&Тест
Процедура ВзятьНеПора() Экспорт

	// Дано

	ОчередьФикстура   = ОчередьФикстура(5000);
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	Результат = ОчередьОтложенных.Взять();

	// Тогда

	Ожидаем.Что(Результат).Равно(Опциональные.Пустой());
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодВзятьРаз,
		"Ожидали что не будет вызван метод Взять на вложенной очереди"
	).Равно(0);

КонецПроцедуры

&Тест
Процедура ВзятьПора() Экспорт

	ОчередьФикстура   = ОчередьФикстура();
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	Результат = ОчередьОтложенных.Взять();

	// Тогда

	Ожидаем.Что(Результат.СодержитЗначение()).Равно(Истина);
	Ожидаем.Что(Результат.Получить().Значение()).Равно(1);
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодВзятьРаз,
		"Ожидали что будет вызван метод Взять на вложенной очереди"
	).Равно(1);

КонецПроцедуры

&Тест
Процедура ВзятьНеПораНоПодождать() Экспорт

	ОчередьФикстура   = ОчередьФикстура(500);
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	Результат = ОчередьОтложенных.Взять(500);

	// Тогда

	Ожидаем.Что(Результат.СодержитЗначение()).Равно(Истина);
	Ожидаем.Что(Результат.Получить().Значение()).Равно(1);
	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодВзятьРаз,
		"Ожидали что будет вызван метод Взять на вложенной очереди"
	).Равно(1);

КонецПроцедуры

&Тест
Процедура ВзятьНеПораНоПодождатьВПятьПотоков() Экспорт

	ОчередьФикстура   = ОчередьФикстура(500);
	ОчередьОтложенных = Новый ОчередьОтложенных;

	Рефлектор.УстановитьСвойство(
		ОчередьОтложенных,
		"Очередь",
		ОчередьФикстура
	);

	// Когда

	Результаты = ТестМодуль.ВыполнитьВПятьПотоков(
		ОчередьОтложенных,
		"Взять",
		500
	);

	// Тогда

	Для каждого Результат Из Результаты Цикл

		Ожидаем.Что(Результат.СодержитЗначение()).Равно(Истина);
		Ожидаем.Что(Результат.Получить().Значение()).Между(1, 5);
		
	КонецЦикла;

	Ожидаем.Что(
		ОчередьФикстура.ВызванМетодВзятьРаз,
		"Ожидали что будет вызван метод Взять на вложенной очереди"
	).Равно(5);

КонецПроцедуры

Функция ОчередьФикстура(Отложить = 0, ДобавлятьПораВПредставление = Истина)

	Массив = Новый Массив;
	Массив.Добавить(Новый Отложенный(ТекущаяУниверсальнаяДатаВМиллисекундах() + Отложить, 1, ДобавлятьПораВПредставление));
	Массив.Добавить(Новый Отложенный(ТекущаяУниверсальнаяДатаВМиллисекундах() + Отложить, 2, ДобавлятьПораВПредставление));
	Массив.Добавить(Новый Отложенный(ТекущаяУниверсальнаяДатаВМиллисекундах() + Отложить, 3, ДобавлятьПораВПредставление));
	Массив.Добавить(Новый Отложенный(ТекущаяУниверсальнаяДатаВМиллисекундах() + Отложить, 4, ДобавлятьПораВПредставление));
	Массив.Добавить(Новый Отложенный(ТекущаяУниверсальнаяДатаВМиллисекундах() + Отложить, 5, ДобавлятьПораВПредставление));

	ПолеМассив = Новый Поле("Массив")
		.Публичное()
		.ЗначениеПоУмолчанию(Массив);

	ПолеВызванМетодИтератор           = Новый Поле("ВызванМетодИтератор").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодСодержит           = Новый Поле("ВызванМетодСодержит").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодСодержитВсе        = Новый Поле("ВызванМетодСодержитВсе").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодДляКаждого         = Новый Поле("ВызванМетодДляКаждого").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодКоличество         = Новый Поле("ВызванМетодКоличество").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодПусто              = Новый Поле("ВызванМетодПусто").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодПроцессорКоллекции = Новый Поле("ВызванМетодПроцессорКоллекции").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодОчистить           = Новый Поле("ВызванМетодОчистить").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодУдалить            = Новый Поле("ВызванМетодУдалить").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодУдалитьВсе         = Новый Поле("ВызванМетодУдалитьВсе").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодУдалитьЕсли        = Новый Поле("ВызванМетодУдалитьЕсли").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодСохранитьВсе       = Новый Поле("ВызванМетодСохранитьВсе").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодВМассив            = Новый Поле("ВызванМетодВМассив").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодПодсмотреть        = Новый Поле("ВызванМетодПодсмотреть").Публичное().ЗначениеПоУмолчанию(Ложь);
	ПолеВызванМетодВзятьРаз           = Новый Поле("ВызванМетодВзятьРаз").Публичное().ЗначениеПоУмолчанию(0);
	ПолеВызванМетодПоложитьРаз        = Новый Поле("ВызванМетодПоложитьРаз").Публичное().ЗначениеПоУмолчанию(0);
	
	МетодИтератор = Новый Метод("Итератор")
		.Публичный()
		.ТелоМетода("ВызванМетодИтератор = Истина; Возврат Новый ИтераторМассив(Массив, ЭтотОбъект);");

	МетодСодержит = Новый Метод("Содержит")
		.Публичный()
		.Параметр(Новый ПараметрМетода("Элемент"))
		.ТелоМетода("ВызванМетодСодержит = Истина;");

	МетодСодержитВсе = Новый Метод("СодержитВсе")
		.Публичный()
		.Параметр(Новый ПараметрМетода("Коллекция"))
		.ТелоМетода("ВызванМетодСодержитВсе = Истина;");

	МетодДляКаждого = Новый Метод("ДляКаждого")
		.Публичный()
		.Параметр(Новый ПараметрМетода("Алгоритм"))
		.Параметр(Новый ПараметрМетода("Контекст"))
		.ТелоМетода("ВызванМетодДляКаждого = Истина;");

	МетодКоличество = Новый Метод("Количество")
		.Публичный()
		.ТелоМетода("ВызванМетодКоличество = Истина");

	МетодПусто = Новый Метод("Пусто")
		.Публичный()
		.ТелоМетода("ВызванМетодПусто = Истина;");

	МетодПроцессорКоллекции = Новый Метод("ПроцессорКоллекции")
		.Публичный()
		.ТелоМетода("ВызванМетодПроцессорКоллекции = Истина;");
		
	МетодОчистить = Новый Метод("Очистить")
		.Публичный()
		.ТелоМетода("ВызванМетодОчистить = Истина;");

	МетодУдалить = Новый Метод("Удалить")
		.Публичный()
		.Параметр(Новый ПараметрМетода("Элемент"))
		.ТелоМетода("ВызванМетодУдалить = Истина;");

	МетодУдалитьВсе = Новый Метод("УдалитьВсе")
		.Публичный()
		.Параметр(Новый ПараметрМетода("Коллекция"))
		.ТелоМетода("ВызванМетодУдалитьВсе = Истина;");

	МетодУдалитьЕсли = Новый Метод("УдалитьЕсли")
		.Публичный()
		.Параметр(Новый ПараметрМетода("Условие"))
		.Параметр(Новый ПараметрМетода("Контекст"))
		.ТелоМетода("ВызванМетодУдалитьЕсли = Истина;");
	
	МетодСохранитьВсе = Новый Метод("СохранитьВсе")
		.Публичный()
		.Параметр(Новый ПараметрМетода("Коллекция"))
		.ТелоМетода("ВызванМетодСохранитьВсе = Истина;");

	МетодВМассив = Новый Метод("ВМассив")
		.Публичный()
		.ТелоМетода("ВызванМетодВМассив = Истина;");

	МетодПодсмотреть = Новый Метод("Подсмотреть")
		.Публичный()
		.ТелоМетода("ВызванМетодПодсмотреть = Истина; Возврат Новый Опциональный(Массив[0]);");

	МетодВзять = Новый Метод("Взять")
		.Публичный()
		.ТелоМетода("
		|	ВызванМетодВзятьРаз = ВызванМетодВзятьРаз + 1;
		|	Элемент = Массив[0];
		|	Массив.Удалить(0);
		|	Возврат Новый Опциональный(Элемент);"
		);
	
	МетодПоложить = Новый Метод("Положить")
		.Публичный()
		.Параметр(Новый ПараметрМетода("Элемент"))
		.ТелоМетода("ВызванМетодПоложитьРаз = ВызванМетодПоложитьРаз + 1; Возврат Истина;");
	
	Результат = Новый ПостроительДекоратора()
		.Поле(ПолеМассив)
		.Поле(ПолеВызванМетодИтератор)
		.Поле(ПолеВызванМетодСодержит)
		.Поле(ПолеВызванМетодСодержитВсе)
		.Поле(ПолеВызванМетодДляКаждого)
		.Поле(ПолеВызванМетодКоличество)
		.Поле(ПолеВызванМетодПусто)
		.Поле(ПолеВызванМетодПроцессорКоллекции)
		.Поле(ПолеВызванМетодОчистить)
		.Поле(ПолеВызванМетодУдалить)
		.Поле(ПолеВызванМетодУдалитьВсе)
		.Поле(ПолеВызванМетодУдалитьЕсли)
		.Поле(ПолеВызванМетодСохранитьВсе)
		.Поле(ПолеВызванМетодВМассив)
		.Поле(ПолеВызванМетодПодсмотреть)
		.Поле(ПолеВызванМетодВзятьРаз)
		.Поле(ПолеВызванМетодПоложитьРаз)
		.Метод(МетодИтератор)
		.Метод(МетодСодержит)
		.Метод(МетодДляКаждого)
		.Метод(МетодСодержитВсе)
		.Метод(МетодКоличество)
		.Метод(МетодПусто)
		.Метод(МетодПроцессорКоллекции)
		.Метод(МетодПоложить)
		.Метод(МетодОчистить)
		.Метод(МетодУдалить)
		.Метод(МетодУдалитьВсе)
		.Метод(МетодУдалитьЕсли)
		.Метод(МетодСохранитьВсе)
		.Метод(МетодВМассив)
		.Метод(МетодПодсмотреть)
		.Метод(МетодВзять)
		.Построить();

	Возврат Результат;

КонецФункции

Рефлектор = Новый Рефлектор;
