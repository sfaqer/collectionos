#Использовать lambdas

// Преобразует массив в список
//
// Параметры:
//   Массив - Массив из Произвольный - Исходный массив для преобразования
//          - ФиксированныйМассив из Произвольный - Исходный массив для преобразования
//
// Возвращаемое значение:
//   Список - Список, содержащий элементы исходного массива
//
Функция КакСписок(Знач Массив) Экспорт

	Рефлектор = Новый Рефлектор;

	Результат = Новый СписокМассив();

	Рефлектор.УстановитьСвойство(
		Результат,
		"Массив",
		Скопировать(Массив)
	);

	Возврат Результат;

КонецФункции

// Преобразует массив в множество
//
// Параметры:
//   Массив - Массив из Произвольный - Исходный массив для преобразования
//          - ФиксированныйМассив из Произвольный - Исходный массив для преобразования
//
// Возвращаемое значение:
//   Множество - Множество, содержащее уникальные элементы исходного массива
//
Функция КакМножество(Массив) Экспорт

	Рефлектор = Новый Рефлектор;

	Результат = Новый МножествоСоответствие();

	Соответствие = Новый Соответствие;

	Для каждого Элемент Из Массив Цикл
		Соответствие.Вставить(Элемент, Истина);
	КонецЦикла;

	Рефлектор.УстановитьСвойство(
		Результат,
		"Соответствие",
		Соответствие
	);

	Возврат Результат;

КонецФункции

// Создает копию массива
//
// Параметры:
//   Массив - Массив из Произвольный - Исходный массив для копирования
//          - ФиксированныйМассив из Произвольный - Исходный массив для копирования
//
// Возвращаемое значение:
//   Массив - Новый массив, содержащий все элементы исходного массива
//
Функция Скопировать(Массив) Экспорт

	Если ТипЗнч(Массив) = Тип("ФиксированныйМассив") Тогда
		Результат = Новый Массив(Массив);
	Иначе
		Результат = Новый Массив(Новый ФиксированныйМассив(Массив));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Создает массив из указанных элементов
//
// Параметры:
//   Элемент1  - Произвольный - Элемент для создания массива
//   Элемент2  - Произвольный - Элемент для создания массива
//   Элемент3  - Произвольный - Элемент для создания массива
//   Элемент4  - Произвольный - Элемент для создания массива
//   Элемент5  - Произвольный - Элемент для создания массива
//   Элемент6  - Произвольный - Элемент для создания массива
//   Элемент7  - Произвольный - Элемент для создания массива
//   Элемент8  - Произвольный - Элемент для создания массива
//   Элемент9  - Произвольный - Элемент для создания массива
//   Элемент10 - Произвольный - Элемент для создания массива
//   Элемент11 - Произвольный - Элемент для создания массива
//   Элемент12 - Произвольный - Элемент для создания массива
//   Элемент13 - Произвольный - Элемент для создания массива
//   Элемент14 - Произвольный - Элемент для создания массива
//   Элемент15 - Произвольный - Элемент для создания массива
//   Элемент16 - Произвольный - Элемент для создания массива
//   Элемент17 - Произвольный - Элемент для создания массива
//   Элемент18 - Произвольный - Элемент для создания массива
//   Элемент19 - Произвольный - Элемент для создания массива
//   Элемент20 - Произвольный - Элемент для создания массива
//   Элемент21 - Произвольный - Элемент для создания массива
//   Элемент22 - Произвольный - Элемент для создания массива
//   Элемент23 - Произвольный - Элемент для создания массива
//   Элемент24 - Произвольный - Элемент для создания массива
//   Элемент25 - Произвольный - Элемент для создания массива
//   Элемент26 - Произвольный - Элемент для создания массива
//   Элемент27 - Произвольный - Элемент для создания массива
//   Элемент28 - Произвольный - Элемент для создания массива
//   Элемент29 - Произвольный - Элемент для создания массива
//   Элемент30 - Произвольный - Элемент для создания массива
//   Элемент31 - Произвольный - Элемент для создания массива
//   Элемент32 - Произвольный - Элемент для создания массива
//
// Возвращаемое значение:
//   ФиксированныйМассив - Массив, содержащий указанные элементы
//
Функция ИзЭлементов(
	// BSLLS:NumberOfParams-off
	// BSLLS:NumberOfOptionalParams-off
	// BSLLS:UnusedParameters-off
		Элемент1 = NULL, Элемент2 = NULL, Элемент3 = NULL, Элемент4 = NULL, Элемент5 = NULL,
		Элемент6 = NULL, Элемент7 = NULL, Элемент8 = NULL, Элемент9 = NULL, Элемент10 = NULL,
		Элемент11 = NULL, Элемент12 = NULL, Элемент13 = NULL, Элемент14 = NULL, Элемент15 = NULL,
		Элемент16 = NULL, Элемент17 = NULL, Элемент18 = NULL, Элемент19 = NULL, Элемент20 = NULL,
		Элемент21 = NULL, Элемент22 = NULL, Элемент23 = NULL, Элемент24 = NULL, Элемент25 = NULL,
		Элемент26 = NULL, Элемент27 = NULL, Элемент28 = NULL, Элемент29 = NULL, Элемент30 = NULL,
		Элемент31 = NULL, Элемент32 = NULL
	// BSLLS:NumberOfParams-on
	// BSLLS:NumberOfOptionalParams-on
	// BSLLS:UnusedParameters-on
	) Экспорт

	Результат = Новый Массив;

	Для сч = 1 По 32 Цикл

		Значение = Вычислить("Элемент" + сч);

		Если Значение = NULL Тогда
			Прервать;
		КонецЕсли;

		Результат.Добавить(Значение);

	КонецЦикла;

	Возврат Новый ФиксированныйМассив(Результат);

КонецФункции

// Сортирует массив в соответствии с переданным алгоритмом
//
// Параметры:
//   Массив - Массив из Произвольный - Исходный массив для сортировки
//   СравнениеЗначений - Действие - Делегат на функцию с двумя параметрами
//    в которую передаются 2 элемента коллекции, и которая возвращает число
//      1 - Если первый элемент больше,
//     -1 - Если второй элемент больше,
//      0 - Если элементы равны
//                     - Строка - Лямбда выражение с двумя параметрами
//    в которую передаются 2 элемента коллекции, и которая возвращает число
//      1 - Если первый элемент больше,
//     -1 - Если второй элемент больше,
//      0 - Если элементы равны
//   Контекст - Структура - Контекст добавляемый в лямбда выражение, значения будут доступны по обращению
//    к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//            - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение, в лямбда выражении
//    будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
// Пример:
//    Массивы.Сортировать(Массив, СравнениеЗначений.ПрямойПорядок());
//
////////
//
//    Массивы.Сортировать(
//        Массив,
//        "Первый, Второй -> {
//        | Если Первый > Второй Тогда
//        |     Возврат 1;
//        | ИначеЕсли Второй > Первый Тогда
//        |     Возврат -1;
//        | Иначе
//        |     Возврат 0;
//        | КонецЕсли;
//        |}"
//    );
//
Процедура Сортировать(Массив, Знач СравнениеЗначений, Знач Контекст = Неопределено) Экспорт

	Если ТипЗнч(СравнениеЗначений) = Тип("Строка") Тогда

		СравнениеЗначений = Лямбда.Выражение(СравнениеЗначений)
			.Интерфейс(ФункциональныеИнтерфейсы.БиФункция());

		Если ТипЗнч(Контекст) = Тип("Структура")
            Или ТипЗнч(Контекст) = Тип("ФиксированнаяСтруктура") Тогда
			СравнениеЗначений.Контекст(Контекст);
		Иначе
			СравнениеЗначений.ЗахватитьОбъект(Контекст);
		КонецЕсли;

		СравнениеЗначений = СравнениеЗначений.ВДействие();

	КонецЕсли;

    МинимальныйРазмерБлока = 32;

    Для Индекс = 0 По Массив.ВГраница() Цикл

        НачалоБлока = Индекс;
        КонецБлока = Мин(Индекс + МинимальныйРазмерБлока - 1, Массив.ВГраница());

        Пока КонецБлока > НачалоБлока
			И СравнениеЗначений.Выполнить(Массив[КонецБлока], Массив[КонецБлока - 1]) < 0 Цикл
            КонецБлока = КонецБлока - 1;
        КонецЦикла;

        Если КонецБлока = НачалоБлока Тогда
            Продолжить;
        КонецЕсли;

        СортироватьБлок(Массив, НачалоБлока, КонецБлока, СравнениеЗначений);
        Индекс = КонецБлока;

    КонецЦикла;

    СлияниеБлоков(Массив, 0, Массив.ВГраница(), СравнениеЗначений);

КонецПроцедуры

Процедура СортироватьБлок(Массив, Начало, Конец, СравнениеЗначений)

    Для Индекс = Начало + 1 По Конец Цикл

        Правый = Массив[Индекс];
        Левый  = Индекс - 1;

        Пока Левый >= Начало И СравнениеЗначений.Выполнить(Массив[Левый], Правый) > 0 Цикл
            Массив[Левый + 1] = Массив[Левый];
            Левый = Левый - 1;
        КонецЦикла;

        Массив[Левый + 1] = Массив[Индекс];
        Массив[Индекс]    = Правый;

    КонецЦикла;

КонецПроцедуры

Процедура СлияниеБлоков(Массив, Начало, Конец, СравнениеЗначений)

    Если Начало >= Конец Тогда
        Возврат;
    КонецЕсли;

    Середина = Цел((Начало + Конец) / 2);
    СлияниеБлоков(Массив, Начало, Середина, СравнениеЗначений);
    СлияниеБлоков(Массив, Середина + 1, Конец, СравнениеЗначений);

    Левый = Начало;
    Правый = Середина + 1;
    ВременныйМассив = Новый Массив();

    Пока Левый <= Середина И Правый <= Конец Цикл

        Если СравнениеЗначений.Выполнить(Массив[Левый], Массив[Правый]) <= 0 Тогда
            ВременныйМассив.Добавить(Массив[Левый]);
            Левый = Левый + 1;
        Иначе
            ВременныйМассив.Добавить(Массив[Правый]);
            Правый = Правый + 1;
        КонецЕсли;

    КонецЦикла;

    Пока Левый <= Середина Цикл
        ВременныйМассив.Добавить(Массив[Левый]);
        Левый = Левый + 1;
    КонецЦикла;

    Пока Правый <= Конец Цикл
        ВременныйМассив.Добавить(Массив[Правый]);
        Правый = Правый + 1;
    КонецЦикла;

    Для Индекс = 0 По ВременныйМассив.ВГраница() Цикл
		Массив[Начало + Индекс] = ВременныйМассив[Индекс];
    КонецЦикла;

КонецПроцедуры
